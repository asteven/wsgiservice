2009-07-15  Patrice Neff <www-github@patrice.ch>

  * tests/test_application.py, tests/test_resource.py, tests/test_router.py:
  Add a one-line docstring to each test method.

  * wsgiservice/resource.py, wsgiservice/status.py: Import missing
  ResponseException which has been moved to exceptions.py.

  * docs/index.rst, docs/modules/reference.rst, docs/modules/wsgiservice.rst,
  examples/store.py, wsgiservice/__init__.py, wsgiservice/application.py,
  wsgiservice/exceptions.py, wsgiservice/resource.py, wsgiservice/routing.py,
  wsgiservice/status.py: A lot of additional documentation.

  * docs/Makefile: docs/Makefile: Add coverage target to generate a
  documentation coverage report.

  * INSTALL, README, README.markdown: Add new INSTALL file, change the
  existing README.markdown to the more common README (aka no more github
  whoring).

  * tests/test_application.py, tests/test_resource.py, tests/test_router.py,
  wsgiservice/application.py, wsgiservice/decorators.py,
  wsgiservice/exceptions.py, wsgiservice/resource.py, wsgiservice/routing.py,
  wsgiservice/status.py: Fix files according to checks by pep8.py.

  * wsgiservice/status.py: status.py (raise_500): Include optional msg
  argument (BUG).

  * wsgiservice/resource.py: resource.py (Help._get_parameters): Mark
  parameters with validation rules as mandatory.

  * wsgiservice/resource.py: resource.py (Help.GET): Sort the resources by
  name.

  * wsgiservice/resource.py: resource.py (Resource._get_xml_value): Output
  valid XML when serializing lists. Each child is now called <childN> instead
  of just <N> (where N is the array index).

  * wsgiservice/resource.py: resource.py (Resource.convert_response): Remove
  hard-coded setting of Content-Type and Content-MD5 response headers. Move
  into a new generic method set_response_headers which in turn calls the two
  methods set_response_content_type and set_response_content_md5.  This allows
  for easier overwriting in subclasses.

2009-07-06  Patrice Neff <www-github@patrice.ch>

  * wsgiservice/resource.py: resource.py (Help.EXTENSION_MAP): Put the HTML
  view first so it becomes the default. Create the list by concatenating the
  base Resource EXTENSION_MAP instead of hardcoding all three values.

  * tests/test_resource.py, wsgiservice/resource.py: resource.py
  (Resource.call_method): Fix handling of optional parameters. Was only
  working when the method expected exactly two parameters.

2009-06-29  Patrice Neff <www-github@patrice.ch>

  * tests/test_resource.py: Make sure that the first MIME type is used as
  default.

  * CHANGELOG, tests/test_router.py, wsgiservice/resource.py,
  wsgiservice/routing.py: Change EXTENSION_MAP to a list instead of a
  dictionary, so we can rely on the order of entries. Breaks
  backwards-compatibility for resources with a custom EXTENSION_MAP.

  * CHANGELOG, tests/test_router.py, wsgiservice/routing.py: routing.py
  (Router._compile): Use extensions defined by resource in EXTENSION_MAP
  dictionary instead of the hardcoded list of '.xml' and '.json'.

  * setup.py: Increment version to 0.2.1 (unreleased) for all further changes.

  * README.markdown: Update documentation for production readyness.

  * setup.py: Increment version to 0.2

  * setup.py: Remove un-needed print in setup.py

  * tests/test_resource.py, wsgiservice/resource.py: Ignore requests for
  favicon.ico and robots.txt by default.

  * tests/test_resource.py, wsgiservice/resource.py: Response code 400 for
  validation errors.

  * tests/test_resource.py, wsgiservice/resource.py: Allow default parameter
  values for some arguments in resource methods.

  * wsgiservice/application.py, wsgiservice/resource.py: Make resource
  callable.

2009-06-25  Patrice Neff <www-github@patrice.ch>

  * examples/store.py, examples/user.py, wsgiservice/application.py,
  wsgiservice/resource.py: Require that all resourcer constructor arguments
  are given as named parameters.

2009-06-23  Patrice Neff <www-github@patrice.ch>

  * .gitignore: Ignore build/ and dist/

  * setup.py, wsgiservice/__init__.py: Prepare setup.py and __init__.py for
  release.

  * tests/test_response.py, wsgiservice/__init__.py, wsgiservice/routing.py:
  Finally get rid of wsgiservice.objects

  * wsgiservice/resource.py: New resource validation todo: Allow validation by
  type (e.g. header, post, query, etc.)

  * wsgiservice/resource.py: wsgiservice.resource.Help: Instantiate resources
  with correct Request, Response and path_params arguments.

  * tests/test_application.py, wsgiservice/application.py: Add all Resource
  classes, not just direct subclasses to the application.

  * tests/test_application.py, wsgiservice/application.py: Handle Resource
  subclasses which are used as base classes by ignoring them.

  * wsgiservice/resource.py: Identify some missing TODO items.

  * examples/store.py: Make store example nicer to read.

  * wsgiservice/status.py: 401 response needs to send WWW-Authenticate header
  (mandatory)

  * tests/test_application.py: Fix app test.

2009-06-18  Patrice Neff <www-github@patrice.ch>

  * examples/user.py, wsgiservice/resource.py: Include docstring of resource
  in help.

  * wsgiservice/resource.py: Always add all path parameters to the list of
  params.

  * wsgiservice/resource.py: Better name for submit button.

  * wsgiservice/resource.py: Toggle visibility of method details - hide by
  default.

  * wsgiservice/resource.py: Allow custom input fields.

  * wsgiservice/resource.py: Clean up creation of the input fields.

  * wsgiservice/resource.py: Allow the Accept header to be set in the help
  interface.

  * wsgiservice/resource.py: Fix URL building in help when the application is
  mounted at the non-root level.

  * wsgiservice/resource.py: Mount help at /_internal/help - not docs.

  * wsgiservice/resource.py: Fix querystring and POST data handling.

  * examples/store.py, wsgiservice/resource.py: Add some Javascript to the
  documentation which allows easy debugging of the service.

  * examples/store.py, wsgiservice/application.py, wsgiservice/resource.py: By
  default add the Help resource for automatically documenting services.

  * examples/store.py: HTML output for service documentation.

  * examples/store.py, wsgiservice/resource.py: Initial proof of concept for
  the self-documenting resources - mounted for the store service at
  /_internal/docs.

  * tests/test_router.py, wsgiservice/routing.py: Improve routing: more
  specific paths (especially the hard-coded ones) now take precedence, while
  variable paths are considered last.

2009-06-17  Patrice Neff <www-github@patrice.ch>

  * examples/user.py, tests/test_application.py, wsgiservice/resource.py: Add
  a special attribute NOT_FOUND to the Resource class which is a tuple of all
  exceptions that should be treated as 404.

  * examples/user.py: Hash passwords in user DB example.

  * examples/user.py, wsgiservice/application.py: Upgrade user example
  application to state of the art.

  * tests/test_resource.py, wsgiservice/resource.py: Better XML serialisation
  for boolean values.

  * tests/test_application.py, wsgiservice/decorators.py: Allow timedelta
  objects for expires.

  * tests/test_application.py, wsgiservice/application.py,
  wsgiservice/resource.py: Catch exceptions and output them cleanly.

  * wsgiservice/application.py: Log some data for each request.

  * examples/store_gzipped.py, wsgiservice/application.py: Example of how to
  add a gzip middleware.

  * tests/test_application.py, wsgiservice/application.py,
  wsgiservice/resource.py: Return different ETags for different
  representations.

  * tests/test_application.py, wsgiservice/application.py,
  wsgiservice/resource.py: Implement OPTIONS methods on resource.

  * wsgiservice/application.py, wsgiservice/resource.py,
  wsgiservice/status.py: More HTTP status codes have raise_* methods.

  * tests/test_application.py, wsgiservice/application.py,
  wsgiservice/status.py: Handle 201 response codes, correctly setting the
  location header.

  * wsgiservice/resource.py: Document the Resource variables XML_ROOT_TAG,
  KNOWN_METHODS and EXTENSION_MAP.

  * wsgiservice/resource.py, wsgiservice/status.py: Improve documentation.

  * docs/modules/reference.rst, wsgiservice/resource.py: Some documentation
  fixes.

  * docs/modules/wsgiservice.rst, tests/test_application.py,
  wsgiservice/application.py, wsgiservice/resource.py: Move as much as code
  possible into the Resource base class to make it easily overwriteable.

  * wsgiservice/__init__.py: Remove the unused duration access.

  * examples/store.py: Fix the data store example.

  * examples/store.py, tests/test_application.py, wsgiservice/__init__.py,
  wsgiservice/application.py, wsgiservice/decorators.py,
  wsgiservice/objects.py, wsgiservice/resource.py, wsgiservice/routing.py,
  wsgiservice/status.py: Major refactoring, making the code a lot easier to
  read and more extensible.

  * docs/tutorial.rst, tests/test_application.py, wsgiservice/__init__.py,
  wsgiservice/application.py, wsgiservice/decorators.py,
  wsgiservice/objects.py, wsgiservice/resource.py: Clean up some documentation
  and classes.

  * .gitignore: Ignore the .env/ directory which keeps my virtualenv.

2009-05-02  Patrice Neff <www-github@patrice.ch>

  * docs/todo.rst, wsgiservice/__init__.py, wsgiservice/application.py: Better
  documentation for Resource methods. And move todo items to application
  in-code.

  * docs/index.rst, docs/tutorial.rst: Simple tutorial.

2009-05-01  Patrice Neff <www-github@patrice.ch>

  * TODO.txt, docs/conf.py, docs/index.rst, docs/philosophy.rst,
  docs/todo.rst: Move TODOs to docs.

  * .gitignore, docs/Makefile, docs/conf.py, docs/index.rst,
  docs/modules/reference.rst, docs/modules/wsgiservice.rst,
  docs/philosophy.rst, wsgiservice/__init__.py, wsgiservice/application.py,
  wsgiservice/decorators.py, wsgiservice/exceptions.py,
  wsgiservice/objects.py, wsgiservice/routing.py: Add initial documentation
  with Shinx

  * wsgiservice/application.py, wsgiservice/exceptions.py,
  wsgiservice/objects.py: Sprinkle log statements throughout the application.

  * TODO.txt, tests/test_application.py, tests/test_response.py,
  wsgiservice/application.py, wsgiservice/objects.py: Generate and validate
  Content-MD5 headers.

  * setup.py, wsgiservice/objects.py: Use webob.Request for the MIME parsing.

  * TODO.txt, tests/test_application.py, wsgiservice/application.py: Response
  with 501 code for unknown methods.

  * TODO.txt, tests/test_application.py, wsgiservice/application.py: Allow
  generation of a Last-Modified header and use it for conditional queries.

  * TODO.txt: ETag handling done.

  * tests/test_application.py, wsgiservice/application.py: Output 304 response
  for HEAD requests as well.

  * tests/test_application.py, wsgiservice/application.py,
  wsgiservice/objects.py: Fall back to GET response when a HEAD is received.

  * tests/test_application.py, wsgiservice/application.py: Handle
  If-None-Match request header.

  * tests/test_response.py, wsgiservice/objects.py: Allow empty response.

  * tests/test_application.py, wsgiservice/application.py: Correctly handle
  If-Match which evaluates to true.

  * tests/test_application.py, wsgiservice/application.py: Return 412 code if
  the If-Match request header doesn't match the current resource ETag.

  * tests/test_application.py, wsgiservice/application.py: Generate ETag for
  resource.

  * setup.py, tests/test_application.py, tests/test_request.py,
  wsgiservice/objects.py: Use webob.Request for request environment parsing.

  * wsgiservice/application.py: Split up Application _call_resource() method.

2009-04-27  Patrice Neff <www-github@patrice.ch>

  * examples/store.py: Fix store example's retrieval of POST values.

  * TODO.txt, tests/test_application.py, tests/test_response.py,
  wsgiservice/objects.py: Declare charset as UTF-8 always.

  * TODO.txt, tests/test_response.py, wsgiservice/objects.py: Include Vary
  header to indicate we did content negotiation.

  * tests/test_response.py, wsgiservice/objects.py: Allow text_xml_root on
  resource and also allow a None value.

  * tests/test_application.py, tests/test_response.py, wsgiservice/objects.py:
  Allow the method to define a root tag.

  * README.markdown: Fix markdown syntax of inline code examples.

  * TODO.txt: List of TODO items that I'd like for WsgiService.

  * setup.py, wsgiservice/application.py, wsgiservice/decorators.py: - Use
  decorator library for easy creation of the decorators. - Use inspect to get
  the list of named parameters.

2009-04-24  Patrice Neff <www-github@patrice.ch>

  * README.markdown: Document the two ways of how we could handle parameters
  under Open Questions of the README.

  * .gitignore: Ignore the others/ directory.

2009-04-20  Patrice Neff <www-github@patrice.ch>

  * README.markdown: Description of current implementation.

  * tests/test_application.py: Test that we can wrap an already wrapped method
  with expires.

  * README.markdown: Clarify.

  * README.markdown: Document the guiding principle.

  * tests/test_application.py, wsgiservice/__init__.py,
  wsgiservice/application.py, wsgiservice/decorators.py,
  wsgiservice/objects.py: Implement expires() decorator. At the moment a bit
  messy, but I hope I found better ways. Mostly I'm concerned with the
  MiniResponse class which may not be necessary and the _names I assign to the
  wrapped method to keep around the method arguments.

  * tests/test_application.py, wsgiservice/application.py,
  wsgiservice/exceptions.py: Test the validations.

  * setup.py, tests/test_application.py: Test the WSGI interface.

  * tests/test_application.py, wsgiservice/__init__.py,
  wsgiservice/application.py: - Move Application class and get_app method to
  separate module wsgiservice.application. - Initial tests for that module.

  * tests/test_response.py, wsgiservice/__init__.py, wsgiservice/objects.py: -
  Move Response and Request classes to wsgiservice.objects module. - Better
  tests for the Repsonse object.

  * tests/test_response.py, wsgiservice/__init__.py: Initial test for the
  response service.

2009-04-19  Patrice Neff <www-github@patrice.ch>

  * tests/test_router.py, wsgiservice/__init__.py, wsgiservice/routing.py:
  Move routing into a separate module, test it.

  * .gitignore: git: Ignore coverage file.

  * tests/test_request.py, wsgiservice/__init__.py: Fix request.POST and test
  it.

  * wsgiservice/__init__.py, wsgiservice/decorators.py: Move decorators to a
  separate module.

  * tests/test_resource.py: Test validation decorator on a method.

  * tests/test_resource.py: Assert validations on a resource class.

  * tests/test_resource.py: Initial tests.

  * examples/user.py: Fix class name in user service example.

  * wsgiservice/__init__.py: Only allow valid extensions in the path.

  * examples/user.py, wsgiservice/__init__.py: Use to_* functions to be able
  to overwrite the conversion to a given MIME type.

  * examples/user.py, wsgiservice/__init__.py: Start adding the more advanced
  declarations used by the user service. Implement validations.

  * wsgiservice/__init__.py: Allow extension to overwrite the MIME type.

  * setup.py, wsgiservice/__init__.py: - Use mimeparse to find the correct
  output type. - Serialize dict and list to XML when requested.

  * wsgiservice/__init__.py: Document the allowed methods using the Allow
  response header.

  * examples/store.py, wsgiservice/__init__.py: Return json encoded value of
  the API function to the browser.

  * wsgiservice/__init__.py: Use property decorator for response headers.

  * wsgiservice/__init__.py: Automatically interpolate request params into the
  method and call it.

  * wsgiservice/__init__.py: Use a Response object to pass around response
  status.

  * wsgiservice/__init__.py: HTTP method validation.

  * examples/store.py, wsgiservice/__init__.py: Initial working code, launches
  the application and even matches the paths to resources.

  * .gitignore, wsgiservice/__init__.pyc: Ignore .pyc files.

  * examples/store.py, examples/user.py: Fix uuid import typo.

  * wsgiservice/__init__.py, wsgiservice/__init__.pyc: Starts with
  declarations of the wsgiservice framework.

  * setup.py: Initial setup.py file with setuptools

  * examples/store.py, examples/user.py: Run the example applications using
  wsgiref.simple_server.

  * examples/user.py: Example of users service with a lot more usage of the
  potential WsgiService API.

  * examples/store.py: Pass in request to method (but only if it's actually
  needed).

  * README.markdown: Some more entries in the README.

  * examples/README, examples/store.py: Initial brainstorming for a document
  store service.

  * README.markdown: Fix markdown syntax.

  * README.markdown: Initial README file explaining the project.
